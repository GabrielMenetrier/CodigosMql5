//Esse indicador deve ser utilizado em um ativo analise (PETR4 por exemplo) juntamente com um ativo comparativo, usado como imput em Acao.


#property copyright "Copyright 2024, Gabriel Santi."
#property link      "https://www.mql5.com"
#property version   "1.00"
#property indicator_separate_window

#property indicator_buffers 9;
#property indicator_plots   4;

#property indicator_type1  DRAW_LINE;
#property indicator_label1 "Ação Atual";
#property indicator_color1 clrBlue;
#property indicator_style1 STYLE_SOLID;
#property indicator_width1 1;

#property  indicator_type2  DRAW_LINE;
#property indicator_label2 "Linha Zero";
#property indicator_color2 clrGray;
#property indicator_style2 STYLE_SOLID;
#property indicator_width2 2;

#property  indicator_type3  DRAW_LINE;
#property indicator_label3 "Ação Comparada";
#property indicator_color3 clrRed;
#property indicator_style3 STYLE_SOLID;
#property indicator_width3 1;

#property  indicator_type4  DRAW_LINE;
#property indicator_label4 "Diferença do Score";
#property indicator_color4 clrWhiteSmoke;
#property indicator_style4 STYLE_SOLID;
#property indicator_width4 2;

input ENUM_MA_METHOD MAMethod = MODE_EMA;
input int            tempo     = 40;
input string         Acao     = "PETR3";


double         BufferResultado[];
double         BufferMA[];
double         BufferSD[];
double         BufferCont[];

double         BufferResultado2[];
double         BufferMA2[];
double         BufferSD2[];
double         BufferClose2[];

double         BufferDiff[];

int            HandleSD;
int            HandleMA;

int            HandleSD2;
int            HandleMA2;

void OnInit() 
  { 
  
   SetIndexBuffer(0,BufferResultado,INDICATOR_DATA);
   SetIndexBuffer(1,BufferCont,INDICATOR_DATA);
   SetIndexBuffer(2,BufferResultado2,INDICATOR_DATA);
   SetIndexBuffer(3,BufferDiff,INDICATOR_DATA);
   
   SetIndexBuffer(4,BufferMA,INDICATOR_CALCULATIONS);
   SetIndexBuffer(5,BufferSD,INDICATOR_CALCULATIONS);
   SetIndexBuffer(6,BufferMA2,INDICATOR_CALCULATIONS);
   SetIndexBuffer(7,BufferSD2,INDICATOR_CALCULATIONS);
   SetIndexBuffer(8,BufferClose2,INDICATOR_CALCULATIONS);
   
   HandleMA  = iMA    (NULL,PERIOD_CURRENT,tempo,0,MAMethod,PRICE_CLOSE);
   HandleSD  = iStdDev(NULL,PERIOD_CURRENT,tempo,0,MAMethod,PRICE_CLOSE);
   HandleMA2 = iMA    (Acao,PERIOD_CURRENT,tempo,0,MAMethod,PRICE_CLOSE);
   HandleSD2 = iStdDev(Acao,PERIOD_CURRENT,tempo,0,MAMethod,PRICE_CLOSE);
  } 

int OnCalculate(const int rates_total, 
                const int prev_calculated, 
                const datetime &time[], 
                const double &open[], 
                const double &high[], 
                const double &low[], 
                const double &close[], 
                const long &tick_volume[], 
                const long &volume[], 
                const int &spread[]) 
  { 
  
   int i; 
   if(prev_calculated==0) i=0; 
   else i=prev_calculated-1;
   
     CopyBuffer(HandleSD ,0,0,rates_total,BufferSD);
     CopyBuffer(HandleMA ,0,0,rates_total,BufferMA);
     CopyBuffer(HandleSD2,0,0,rates_total,BufferSD2);
     CopyBuffer(HandleMA2,0,0,rates_total,BufferMA2);
     CopyClose(Acao,PERIOD_CURRENT,0,rates_total,BufferClose2);
   
   
   for(int e=i; e < rates_total; e++)
    {
     
     ArrayResize(BufferCont,ArraySize(BufferCont)+1);
     ArrayResize(BufferResultado,ArraySize(BufferResultado)+1);
     ArrayResize(BufferResultado2,ArraySize(BufferResultado2)+1);
     ArrayResize(BufferDiff,ArraySize(BufferDiff)+1);
     
     
     BufferResultado [e] = (close[e]-BufferMA[e])/BufferSD[e];
     BufferResultado2[e] = (BufferClose2[e]-BufferMA2[e])/BufferSD2[e];
     
     BufferDiff[e]       = BufferResultado[e]-BufferResultado2[e];
     
     BufferCont[e] = 0;
     }
   if(BufferDiff[0]>=1){
   Print(BufferDiff[0]);
   }
     
   return(rates_total); 
  } 
